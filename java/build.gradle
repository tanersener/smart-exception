import java.text.SimpleDateFormat

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

dependencies {
    api project(":smart-exception-common")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    manifest {
        attributes(
                'Built-By': System.getProperty('user.name'),
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSZ").format(new Date()),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': System.getProperty('java.version')
        )
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply plugin: 'maven'
apply plugin: 'signing'

archivesBaseName = "smart-exception-java"

ext {
    libraryName = "smart-exception-java"
    artifact = "smart-exception-java"
    libraryDescription = "smart-exception java and android package"
    libraryVersion = version
}

if (project.hasProperty('release')) {

    File propertiesFile = project.rootProject.file('local.properties')
    if (propertiesFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(propertiesFile))
        properties.each { name, value ->
            ext[name] = value
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    packaging 'jar'
                    name = libraryName
                    description = libraryDescription
                    url = siteUrl

                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id developerId
                            name developerName
                            email developerEmail
                        }
                    }
                    scm {
                        connection gitUrl
                        developerConnection gitUrl
                        url siteUrl
                    }
                }
            }
        }
    }

    signing {
        sign configurations.archives
    }

}
