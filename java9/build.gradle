import java.text.SimpleDateFormat

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9

dependencies {
    api project(":smart-exception-common")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    manifest {
        attributes(
                'Built-By': System.getProperty('user.name'),
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSZ").format(new Date()),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': System.getProperty('java.version')
        )
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

ext {
    bintrayName = "smart-exception-java9"
    libraryName = "smart-exception-java9"
    artifact = "smart-exception-java9"
    libraryDescription = "smart-exception java9 package"
    libraryVersion = version
}

if (project.hasProperty('release')) {

    def pomConfig = {
        licenses {
            license {
                name licenseName
                url licenseUrl
            }
        }
        developers {
            developer {
                id developerId
                name developerName
                email developerEmail
            }
        }

        scm {
            connection gitUrl
            developerConnection gitUrl
            url siteUrl
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId group
                artifactId libraryName
                version libraryVersion
                pom.withXml {
                    def root = asNode()
                    root.appendNode('packaging', 'jar')
                    root.appendNode('name', libraryName)
                    root.appendNode('description', libraryDescription)
                    root.appendNode('url', siteUrl)
                    root.children().last() + pomConfig
                }
            }
        }
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
        publications = ['mavenJava']
        pkg {
            repo = bintrayRepo
            name = bintrayName
            desc = libraryDescription
            websiteUrl = siteUrl
            issueTrackerUrl = issueTrackerUrl
            vcsUrl = gitUrl
            licenses = allLicenses
            dryRun = true
            publish = false
            override = false
            publicDownloadNumbers = false
            version {
                desc = libraryDescription
            }
        }
    }

}
